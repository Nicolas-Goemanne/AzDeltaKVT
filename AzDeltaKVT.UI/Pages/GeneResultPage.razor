@page "/gene-results"
@using AzDeltaKVT.UI.Services
@using AzDeltaKVT.Dto.Results
@using AzDektaKVT.Model
@inject ApiService Api
@inject NavigationManager Navigation

<PageTitle>Gene Results</PageTitle>

<div class="container py-4">
    <h1 class="h3 text-main mb-4"><strong>Search Results</strong></h1>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center py-5">
            <div class="spinner-border text-main" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-3 h5 text-main">Loading...</span>
        </div>
    }
    else if (hasError)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Error:</strong> @errorMessage
        </div>
    }
    else
    {
        <!-- Gene Search Results Section -->
        <section class="mb-5">
            <h2 class="h5 text-main mb-3">Gene search result</h2>
            @if (geneResults != null && geneResults.Any())
            {
                <div class="table-responsive">
                    <table class="table table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Gene</th>
                                <th>Transcript</th>
                                <th class="badge-col">InHouse</th>
                                <th class="badge-col">Select</th>
                                <th class="badge-col">Clinical</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var gene in geneResults)
                            {
                                if (geneTranscripts.ContainsKey(gene.Name) && geneTranscripts[gene.Name].Any())
                                {
                                    foreach (var transcript in geneTranscripts[gene.Name])
                                    {
                                        <tr>
                                            <td>
                                                <button type="button" @onclick="() => NavigateToGenePage(gene.Name)"
                                                        class="btn btn-link text-dark text-decoration-underline p-0 fw-bold">
                                                    @gene.Name
                                                </button>
                                            </td>
                                            <td>
                                                <button type="button" @onclick="() => NavigateToGenePage(gene.Name, transcript.NmNumber)"
                                                        class="btn btn-link text-dark text-decoration-underline p-0">
                                                    @transcript.NmNumber
                                                </button>
                                            </td>
                                            <td class="text-center align-middle">
                                                <span class="@(transcript.IsInHouse ? "bg-true" : "bg-false") rounded-badge">
                                                    @(transcript.IsInHouse ? "✓" : "✖")
                                                </span>
                                            </td>
                                            <td class="text-center align-middle">
                                                <span class="@(transcript.IsSelect ? "bg-true" : "bg-false") rounded-badge">
                                                    @(transcript.IsSelect ? "✓" : "✖")
                                                </span>
                                            </td>
                                            <td class="text-center align-middle">
                                                <span class="@(transcript.IsClinical ? "bg-true" : "bg-false") rounded-badge">
                                                    @(transcript.IsClinical ? "✓" : "✖")
                                                </span>
                                            </td>

                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td>
                                            <button type="button" @onclick="() => NavigateToGenePage(gene.Name)"
                                                    class="btn btn-link text-dark text-decoration-underline p-0 fw-bold">
                                                @gene.Name
                                            </button>
                                        </td>
                                        <td colspan="4" class="text-muted">No transcripts</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-muted">No genes found</div>
            }
        </section>

        <!-- Variants Section -->
        <section class="mb-5">
            <h2 class="h5 text-main mb-3">Variants</h2>
            @if (variantResults != null && variantResults.Any())
            {
                <div class="table-responsive">
                    <table class="table table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Chromosome</th>
                                <th>Position</th>
                                <th>Reference</th>
                                <th>Alternative</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var variant in variantResults)
                            {
                                <tr>
                                    <td>
                                        <button type="button" @onclick="() => NavigateToPositionPage(variant.VariantId)"
                                                class="btn btn-link text-dark text-decoration-underline p-0">
                                            @variant.Chromosome
                                        </button>
                                    </td>
                                    <td>
                                        <button type="button" @onclick="() => NavigateToPositionPage(variant.VariantId)"
                                                class="btn btn-link text-dark text-decoration-underline p-0">
                                            @variant.Position
                                        </button>
                                    </td>
                                    <td>
                                        <button type="button" @onclick="() => NavigateToPositionPage(variant.VariantId)"
                                                class="btn btn-link text-dark text-decoration-underline p-0">
                                            @variant.Reference
                                        </button>
                                    </td>
                                    <td>
                                        <button type="button" @onclick="() => NavigateToPositionPage(variant.VariantId)"
                                                class="btn btn-link text-dark text-decoration-underline p-0">
                                            @variant.Alternative
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-muted">No variants found</div>
            }
        </section>

    }

    <!-- Add New Gene Button -->
    <div class="mt-4">
        <button type="button" @onclick="NavigateToAddGene" 
                class="btn btn-main fw-bold">
            Add New Gene
        </button>
    </div>
</div>

@code {
    [Parameter, SupplyParameterFromQuery] public string? SearchType { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Gene { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Nm { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Chrom { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? Position { get; set; }

    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";
    private string searchType = "";

    // Updated to use DTO types
    private List<GeneResult>? geneResults;
    private List<VariantResult>? variantResults;
    private Dictionary<string, List<NmTranscript>> geneTranscripts = new();

    protected override async Task OnInitializedAsync()
    {
        await PerformSearch();
    }

    protected override async Task OnParametersSetAsync()
    {
        await PerformSearch();
    }

    private async Task PerformSearch()
    {
        isLoading = true;
        hasError = false;
        errorMessage = "";

        try
        {
            // Reset results
            geneResults = null;
            variantResults = null;
            geneTranscripts.Clear();

            if (!string.IsNullOrEmpty(Gene))
            {
                searchType = "gene";
                await SearchByGene(Gene);
            }
            else if (!string.IsNullOrEmpty(Nm))
            {
                searchType = "gene";
                await SearchByNm(Nm);
            }
            else if (!string.IsNullOrEmpty(Chrom) && Position.HasValue)
            {
                searchType = "position";
                await SearchByPosition(Chrom, Position.Value);
            }
            else
            {
                hasError = true;
                errorMessage = "Invalid search parameters";
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"Search failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchByGene(string geneName)
    {
        // Use ApiService for gene search - now returns GeneResult
        geneResults = await Api.SearchGenesAsync(name: geneName);
        
        if (geneResults != null && geneResults.Any())
        {
            // Sort genes alphabetically by name
            geneResults = geneResults.OrderBy(g => g.Name).ToList();

            // Extract transcripts and variants from gene response (already included)
            LoadTranscriptsFromGenes();
            LoadVariantsFromGenes();
        }
    }

    private async Task SearchByNm(string nmNumber)
    {
        // Search for transcript by NM number, then get the associated gene
        var transcript = await Api.GetTranscriptAsync(nmNumber);
        
        if (transcript?.Gene != null)
        {
            // Model.Gene doesn't have Variants/NmNumbers - we need to search for the full gene data
            var fullGenes = await Api.SearchGenesAsync(name: transcript.Gene.Name);
            
            if (fullGenes != null && fullGenes.Any())
            {
                geneResults = fullGenes;
                // Add the transcript we found to the transcripts dictionary
                geneTranscripts[transcript.Gene.Name] = new List<NmTranscript>
                {
                new NmTranscript
                {
                   NmNumber = transcript.NmNumber,
				   GeneId = transcript.GeneId,
				   IsSelect = transcript.IsSelect,
				   IsInHouse = transcript.IsInHouse,
				   IsClinical = transcript.IsClinical
                }
                };
                LoadVariantsFromGenes();
            }
        }
    }

    private async Task SearchByPosition(string chromosome, int position)
    {
        // Use ApiService for variant search - now returns VariantResult
        variantResults = await Api.SearchVariantsAsync(chromosome: chromosome, position: position);
    }

    private void LoadTranscriptsFromGenes()
    {
        if (geneResults == null) return;

        foreach (var gene in geneResults)
        {
            // Transcripts are now included in the gene response
            geneTranscripts[gene.Name] = gene.NmNumbers ?? new List<NmTranscript>();
        }
    }

    private void LoadVariantsFromGenes()
    {
        if (geneResults == null) return;

        var allVariants = new List<VariantResult>();

        foreach (var gene in geneResults)
        {
            // Variants are now included in the gene response
            if (gene.Variants != null)
            {
                // Convert from Model.Variant to VariantResult
                foreach (var variant in gene.Variants)
                {
                    allVariants.Add(new VariantResult
                    {
                        VariantId = variant.VariantId,
                        Chromosome = variant.Chromosome,
                        Position = variant.Position,
                        Reference = variant.Reference,
                        Alternative = variant.Alternative,
                        UserInfo = variant.UserInfo
                    });
                }
            }
        }

        variantResults = allVariants.Distinct().ToList();
    }

    private void NavigateToGenePage(string geneName, string? nmNumber = null)
    {
        var url = $"/gene?name={Uri.EscapeDataString(geneName)}";
        if (!string.IsNullOrEmpty(nmNumber))
        {
            url += $"&nm={Uri.EscapeDataString(nmNumber)}";
        }
        Navigation.NavigateTo(url);
    }

    private void NavigateToPositionPage(int variantId)
    {
        Navigation.NavigateTo($"/position?id={variantId}");
    }

    private void NavigateToAddGene()
    {
        Navigation.NavigateTo("/gene/edit");
    }
}