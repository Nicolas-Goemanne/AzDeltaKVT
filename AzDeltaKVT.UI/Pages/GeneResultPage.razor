@page "/gene-results"
@using AzDeltaKVT.UI.Services
@using AzDeltaKVT.Dto.Results
@using AzDektaKVT.Model
@inject ApiService Api
@inject NavigationManager Navigation

<PageTitle>Gene Results</PageTitle>

<div class="container py-4">
    <h1 class="h2 text-warning mb-4">Search Results</h1>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center py-5">
            <div class="spinner-border text-warning" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-3 h5 text-warning">Loading...</span>
        </div>
    }
    else if (hasError)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Error:</strong> @errorMessage
        </div>
    }
    else
    {
        <!-- Gene Search Results Section -->
        <section class="mb-5">
            <h2 class="h4 text-warning mb-3">Gene search result</h2>
            @if (geneResults != null && geneResults.Any())
            {
                <div class="card">
                    <div class="card-body">
                        @foreach (var gene in geneResults)
                        {
                            <div class="mb-3">
                                <button type="button" @onclick="() => NavigateToGenePage(gene.Name)" 
                                        class="btn btn-link text-dark text-decoration-underline p-0 fw-bold">
                                    @gene.Name
                                </button>
                                @if (geneTranscripts.ContainsKey(gene.Name) && geneTranscripts[gene.Name].Any())
                                {
                                    <span class="ms-3">
                                        @foreach (var transcript in geneTranscripts[gene.Name])
                                        {
                                            <button type="button" @onclick="() => NavigateToGenePage(gene.Name, transcript.NmNumber)" 
                                                    class="btn btn-link text-dark text-decoration-underline p-0 me-2">
                                                @transcript.NmNumber
                                                @if (transcript.IsInHouse) { <span class="badge bg-success">InHouse</span> }
                                                @if (transcript.IsSelect) { <span class="badge bg-primary">Select</span> }
                                                @if (transcript.IsClinical) { <span class="badge bg-secondary">Clinical</span> }
                                            </button>
                                        }
                                    </span>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="text-muted">No genes found</div>
            }
        </section>

        <!-- Variants Section -->
        <section class="mb-5">
            <h2 class="h4 text-warning mb-3">Variants</h2>
            @if (variantResults != null && variantResults.Any())
            {
                <div class="card">
                    <div class="card-body">
                        @foreach (var variant in variantResults)
                        {
                            <div class="mb-2">
                                <button type="button" @onclick="() => NavigateToPositionPage(variant.VariantId)" 
                                        class="btn btn-link text-dark text-decoration-underline p-0">
                                    @variant.Chromosome - @variant.Position - @variant.Reference - @variant.Alternative
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="text-muted">No variants found</div>
            }
        </section>
    }

    <!-- Add New Gene Button -->
    <div class="mt-4">
        <button type="button" @onclick="NavigateToAddGene" 
                class="btn btn-danger fw-bold">
            Add New Gene
        </button>
    </div>
</div>

@code {
    [Parameter, SupplyParameterFromQuery] public string? SearchType { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Gene { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Nm { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Chrom { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? Position { get; set; }

    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";
    private string searchType = "";

    // Updated to use DTO types
    private List<GeneResult>? geneResults;
    private List<VariantResult>? variantResults;
    private Dictionary<string, List<NmTranscript>> geneTranscripts = new();

    protected override async Task OnInitializedAsync()
    {
        await PerformSearch();
    }

    protected override async Task OnParametersSetAsync()
    {
        await PerformSearch();
    }

    private async Task PerformSearch()
    {
        isLoading = true;
        hasError = false;
        errorMessage = "";

        try
        {
            // Reset results
            geneResults = null;
            variantResults = null;
            geneTranscripts.Clear();

            if (!string.IsNullOrEmpty(Gene))
            {
                searchType = "gene";
                await SearchByGene(Gene);
            }
            else if (!string.IsNullOrEmpty(Nm))
            {
                searchType = "gene";
                await SearchByNm(Nm);
            }
            else if (!string.IsNullOrEmpty(Chrom) && Position.HasValue)
            {
                searchType = "position";
                await SearchByPosition(Chrom, Position.Value);
            }
            else
            {
                hasError = true;
                errorMessage = "Invalid search parameters";
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"Search failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchByGene(string geneName)
    {
        // Use ApiService for gene search - now returns GeneResult
        geneResults = await Api.SearchGenesAsync(name: geneName);
        
        if (geneResults != null && geneResults.Any())
        {
            // Sort genes alphabetically by name
            geneResults = geneResults.OrderBy(g => g.Name).ToList();

            // Extract transcripts and variants from gene response (already included)
            LoadTranscriptsFromGenes();
            LoadVariantsFromGenes();
        }
    }

    private async Task SearchByNm(string nmNumber)
    {
        // Search for transcript by NM number, then get the associated gene
        var transcript = await Api.GetTranscriptAsync(nmNumber);
        
        if (transcript?.Gene != null)
        {
            // Model.Gene doesn't have Variants/NmNumbers - we need to search for the full gene data
            var fullGenes = await Api.SearchGenesAsync(name: transcript.Gene.Name);
            
            if (fullGenes != null && fullGenes.Any())
            {
                geneResults = fullGenes;
                // Add the transcript we found to the transcripts dictionary
                geneTranscripts[transcript.Gene.Name] = new List<NmTranscript> { transcript };
                LoadVariantsFromGenes();
            }
        }
    }

    private async Task SearchByPosition(string chromosome, int position)
    {
        // Use ApiService for variant search - now returns VariantResult
        variantResults = await Api.SearchVariantsAsync(chromosome: chromosome, position: position);
    }

    private void LoadTranscriptsFromGenes()
    {
        if (geneResults == null) return;

        foreach (var gene in geneResults)
        {
            // Transcripts are now included in the gene response
            geneTranscripts[gene.Name] = gene.NmNumbers ?? new List<NmTranscript>();
        }
    }

    private void LoadVariantsFromGenes()
    {
        if (geneResults == null) return;

        var allVariants = new List<VariantResult>();

        foreach (var gene in geneResults)
        {
            // Variants are now included in the gene response
            if (gene.Variants != null)
            {
                // Convert from Model.Variant to VariantResult
                foreach (var variant in gene.Variants)
                {
                    allVariants.Add(new VariantResult
                    {
                        VariantId = variant.VariantId,
                        Chromosome = variant.Chromosome,
                        Position = variant.Position,
                        Reference = variant.Reference,
                        Alternative = variant.Alternative,
                        UserInfo = variant.UserInfo
                    });
                }
            }
        }

        variantResults = allVariants.Distinct().ToList();
    }

    private void NavigateToGenePage(string geneName, string? nmNumber = null)
    {
        var url = $"/gene?name={Uri.EscapeDataString(geneName)}";
        if (!string.IsNullOrEmpty(nmNumber))
        {
            url += $"&nm={Uri.EscapeDataString(nmNumber)}";
        }
        Navigation.NavigateTo(url);
    }

    private void NavigateToPositionPage(int variantId)
    {
        Navigation.NavigateTo($"/position?id={variantId}");
    }

    private void NavigateToAddGene()
    {
        Navigation.NavigateTo("/gene/edit");
    }
}