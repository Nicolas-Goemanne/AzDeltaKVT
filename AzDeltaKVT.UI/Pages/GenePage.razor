@page "/gene"
@using AzDeltaKVT.UI.Services
@using AzDeltaKVT.Dto.Results
@using AzDektaKVT.Model
@inject ApiService Api
@inject NavigationManager Navigation

<PageTitle>Gene Details</PageTitle>

<div class="container py-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center py-5">
            <div class="spinner-border text-main" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-3 h5 text-main">Loading...</span>
        </div>
    }
    else if (hasError)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Error:</strong> @errorMessage
        </div>
    }
    else if (currentGene != null)
    {
        <!-- Gene Information Section -->
        <section class="mb-5">
            <h1 class="h3 text-main mb-4"><strong>Gene page</strong></h1>

            <div class="d-flex justify-content-between align-items-center mt-4 mb-2">
                <h1 class="h5 text-main m-0">Gene details</h1>
                <div>
                    <button type="button" @onclick="NavigateToAddTranscript" class="btn btn-main">
                        Add Transcript
                    </button>
                    <button type="button" @onclick="NavigateToEditGene" class="btn btn-main">
                        Edit Gene
                    </button>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-bordered align-middle">
                    <tbody>
                        <tr>
                            <td><strong>Gene Name</strong></td>
                            <td>@currentGene.Name</td>
                        </tr>
                        <tr>
                            <td><strong>Chromosome</strong></td>
                            <td>@currentGene.Chromosome</td>
                        </tr>
                        <tr>
                            <td><strong>NmNumber</strong></td>
                            <td>@Nm</td>
                        </tr>
                        @if (!string.IsNullOrEmpty(currentGene.UserInfo))
                        {
                            <tr>
                                <td><strong>Additional Info</strong></td>
                                <td>@currentGene.UserInfo</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </section>

        <!-- Known Positions Section -->
        <section class="mb-5">
            <div class="d-flex justify-content-between align-items-center mt-4 mb-2">
                <h1 class="h5 text-main m-0">Gene positions</h1>
                <button type="button" @onclick="NavigateToInsertPosition" class="btn btn-main">
                    Insert Position
                </button>
            </div>

            @if (geneVariants != null && geneVariants.Any())
            {
                <div class="table-responsive">
                    <table class="table table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Chromosome</th>
                                <th>Position</th>
                                <th>Reference</th>
                                <th>Alternative</th>
                                <th>Biological Effect</th>
                                <th>Classification</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var gv in geneVariants)
                            {
                                var variant = gv.Variant;
                                <tr>
                                    <td>
                                        <button type="button" @onclick="() => NavigateToPositionPage(variant.VariantId)"
                                                class="btn btn-link text-dark text-decoration-underline p-0">
                                            @variant.Chromosome
                                        </button>
                                    </td>
                                    <td>
                                        <button type="button" @onclick="() => NavigateToPositionPage(variant.VariantId)"
                                                class="btn btn-link text-dark text-decoration-underline p-0">
                                            @variant.Position
                                        </button>
                                    </td>
                                    <td>@variant.Reference</td>
                                    <td>@variant.Alternative</td>
                                    <td>@(gv.BiologicalEffect ?? "-")</td>
                                    <td>@(gv.Classification ?? "-")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-muted text-center py-3">
                    No known positions found for this @(currentTranscript != null ? "transcript" : "gene").
                </div>
            }
        </section>
    }
    else
    {
        <div class="text-center py-5">
            <div class="h4 text-muted mb-3">Gene not found</div>
            <div class="text-muted">The requested gene could not be found in the database.</div>
        </div>
    }
</div>

@code {
    [Parameter, SupplyParameterFromQuery] public string? Name { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Nm { get; set; }

    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";

    private GeneResult? currentGene;
    private NmTranscriptResult? currentTranscript;

    // Eén lijst met alles wat je nodig hebt: GeneVariants inclusief Variant info (positie etc)
    private List<GeneVariantResult> geneVariants = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadGeneData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadGeneData();
    }

    private async Task LoadGeneData()
    {
        if (string.IsNullOrEmpty(Name))
        {
            hasError = true;
            errorMessage = "Gene name is required";
            isLoading = false;
            return;
        }

        isLoading = true;
        hasError = false;
        errorMessage = "";

        try
        {
            if (!string.IsNullOrEmpty(Nm))
            {
                await LoadTranscript();
            }

            await LoadGene();

            // Haal nu alle GeneVariants op die horen bij dit Nm nummer (transcript)
            await LoadGeneVariants();
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"Failed to load gene data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadGene()
    {
        if (currentGene == null)
        {
            currentGene = await Api.GetGeneByNameAsync(Name!);
            if (currentGene == null)
            {
                hasError = true;
                errorMessage = "Gene not found";
            }
        }
    }

    private async Task LoadTranscript()
    {
        if (string.IsNullOrEmpty(Nm)) return;
        currentTranscript = await Api.GetTranscriptAsync(Nm);

        if (currentTranscript?.Gene != null && currentGene == null)
        {
            currentGene = await Api.GetGeneByNameAsync(currentTranscript.Gene.Name);
        }
    }

    private async Task LoadGeneVariants()
    {
        if (string.IsNullOrEmpty(Nm))
        {
            geneVariants = new List<GeneVariantResult>();
            return;
        }

        // Haal alle gene variants op via de API, gefilterd op NmId (jouw API doet dat)
        geneVariants = await Api.GetPositionsFromNm(Nm);
    }

    private void NavigateToPositionPage(int variantId)
    {
        var variant = geneVariants.FirstOrDefault(gv => gv.Variant?.VariantId == variantId)?.Variant;

        if (variant != null && variant.Position.HasValue)
        {
            Navigation.NavigateTo($"/position/{Uri.EscapeDataString(variant.Chromosome!)}/{variant.Position}");
        }
        else
        {
            Navigation.NavigateTo($"/position?id={variantId}");
        }
    }

    private void NavigateToAddTranscript()
    {
        Navigation.NavigateTo($"/gene/edit/{Uri.EscapeDataString(Name!)}");
    }

    private void NavigateToEditGene()
    {
        if (!string.IsNullOrEmpty(Nm))
        {
            Navigation.NavigateTo($"/gene/edit/{Uri.EscapeDataString(Name!)}/{Uri.EscapeDataString(Nm)}");
        }
        else
        {
            Navigation.NavigateTo($"/gene/edit/{Uri.EscapeDataString(Name!)}");
        }
    }

    private void NavigateToInsertPosition()
    {
        var url = $"/position/edit?geneName={Uri.EscapeDataString(Name!)}";
        if (!string.IsNullOrEmpty(Nm))
        {
            url += $"&nm={Uri.EscapeDataString(Nm)}";
        }
        if (currentGene != null)
        {
            url += $"&chromosome={Uri.EscapeDataString(currentGene.Chromosome)}";
        }
        Navigation.NavigateTo(url);
    }
}
