@page "/"
@using AzDeltaKVT.UI.Services
@using AzDeltaKVT.Dto.Results
@using Microsoft.AspNetCore.Http
@using AzDeltaKVT.Dto.Requests
@using Microsoft.AspNetCore.Http.Internal
@using System.Net.Http.Headers
@using AzDeltaKVT.UI.Modal
@inject ApiService Api
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<div class="container py-4">
    <section class="mb-5">
        <h2 class="h3 text-main mb-3"><strong>Search</strong></h2>
        <div class="row g-3">
            <div class="col-md-10">
                <label class="form-label fw-semibold text-main">Gene:</label>
                <input type="text" @bind="geneSearchTerm" @bind:event="oninput"
                       @onkeydown="@(async (e) => await HandleGeneKeyDown(e))"
                       class="form-control" placeholder="Enter a gene name or NM number here (example: name: KIT / number: NM_000222.2)" />
				<div style="min-height: 20px;">
					@if (!string.IsNullOrEmpty(geneErrorMessage))
					{
						<div class="text-danger small mt-1">@geneErrorMessage</div>
					}
				</div>
            </div>
            <div class="col-md-2">
				<div style="margin-top: 32px;">	
					<button @onclick="SearchGene" class="btn btn-main fw-bold w-100" type="button">Search</button>
				</div>
            </div>
        </div>
    </section>

<section class="mb-5">
    <h2 class="h3 text-main mb-3"><strong>Position</strong></h2>
    <div class="row g-3">
        <div class="col-md-5">
            <label class="form-label fw-semibold text-main">Chromosome:</label>
            <input type="text" @bind="chromosomeSearchTerm" @bind:event="oninput"
                   @onkeydown="@(async (e) => await HandlePositionKeyDown(e))"
                   class="form-control" placeholder="Enter chromosome here (example: 4)" />
            <div style="min-height: 25px;">
                @if (!string.IsNullOrEmpty(positionErrorMessage))
                {
                    <div class="text-danger small mt-1">@positionErrorMessage</div>
                }
            </div>
        </div>
        <div class="col-md-5">
            <label class="form-label fw-semibold text-main">Position:</label>
            <input type="text" @bind="positionSearchTerm" @bind:event="oninput"
                   @onkeydown="@(async (e) => await HandlePositionKeyDown(e))"
                   class="form-control" placeholder="Enter position here (example: 55525000)" />
            <div style="min-height: 20px;">
                @if (!string.IsNullOrEmpty(positionErrorMessage))
                {
                    <div class="text-danger small mt-1">@positionErrorMessage</div>
                }
            </div>
        </div>
        <div class="col-md-2">
            <div style="margin-top: 32px;">
                <button @onclick="SearchPosition" class="btn btn-main fw-bold w-100" type="button">Search</button>
            </div>
        </div>
    </div>
</section>

	<section>
		<button @onclick="ToggleUploadModal" class="btn btn-main fw-bold">Upload</button>
	</section>

	@if (showUploadModal)
	{
		<div class="modal fade show d-block" tabindex="-1" @onclick="ToggleUploadModal" style="background-color: rgba(0, 0, 0, 0.5);">
			<div class="modal-dialog" @onclick:stopPropagation>
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Upload Data</h5>
						<button type="button" class="btn-close" @onclick="ToggleUploadModal"></button>
					</div>
					<div class="modal-body">
						<div @ondragover:preventDefault="true" class="border border-2 border-dashed rounded p-4 text-center" style="background-color: #f8f9fa;">
							<p class="mb-2">Drag and drop your TSV file here</p>
							<p class="small text-muted">or click to select</p>
							<InputFile OnChange="HandleFileSelected" accept=".tsv" multiple="false" class="form-control" />
						</div>

						@if (!string.IsNullOrEmpty(uploadMessage))
						{
							<div class="mt-2 alert alert-info">@uploadMessage</div>
						}
					</div>
					<div class="modal-footer">
						<button class="btn btn-secondary" @onclick="ToggleUploadModal">Close</button>
						<button class="btn btn-main" @onclick="UploadFile">Upload</button>
					</div>
				</div>
			</div>
		</div>
	}

	@if (isLoading || testResults.Any())
	{
		<section class="mt-5">
			<div class="card">
				<div class="card-header py-2">
					<h6 class="mb-0 text-muted">
						API Connection Status @(isLoading ? "(Testing...)" : $"({testResults.Count} checks)")
					</h6>
				</div>
				@if (isLoading || testResults.Any(r => r.Contains("❌")))
				{
					<div class="card-body py-2">
						@if (isLoading)
						{
							<div class="d-flex align-items-center">
								<div class="spinner-border spinner-border-sm text-main me-2" role="status">
									<span class="visually-hidden">Loading...</span>
								</div>
								<small class="text-muted">Testing API endpoints...</small>
							</div>
						}

						@if (testResults.Any())
						{
							@foreach (var result in testResults)
							{
								<div class="small mb-1">@result</div>
							}
						}
					</div>
				}
			</div>
		</section>
	}
</div>

@code {
    // Inputvelden gebonden aan UI voor gen- en positiezaken
    private string geneSearchTerm = "";
    private string chromosomeSearchTerm = "";
    private string positionSearchTerm = "";

    // Foutmeldingen voor validatie of API-fouten
    private string geneErrorMessage = "";
    private string positionErrorMessage = "";

    // Status voor laden tijdens API-aanroepen
    private bool isLoading = false;

    // Lijst met testresultaten voor API-verbinding en data status
    private List<string> testResults = new();

    // Lifecycle methode bij initialisatie van component
    protected override async Task OnInitializedAsync()
    {
        // Wacht 2 seconden en test verbinding met API
        await Task.Delay(2000);
        await TestApiConnection();
    }

    // Handel toetsdruk Enter af in gen-zoekveld om zoeken te starten
    private async Task HandleGeneKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchGene();
        }
    }

    // Handel toetsdruk Enter af in positie-zoekveld om zoeken te starten
    private async Task HandlePositionKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchPosition();
        }
    }

    // Test de verbinding met de API en haal data op ter verificatie
    private async Task TestApiConnection()
    {
        isLoading = true;
        testResults.Clear();

        try
        {
            var genes = await Api.GetAllGenesAsync();
            testResults.Add($"Found {genes.Count} genes in database");

            if (genes.Any())
            {
                var firstGene = genes.First();
                testResults.Add($"Sample gene: {firstGene.Name} (Chr {firstGene.Chromosome})");

                if (firstGene.NmNumbers?.Any() == true)
                {
                    testResults.Add($"Sample gene has {firstGene.NmNumbers.Count} transcripts");
                }

                if (firstGene.Variants?.Any() == true)
                {
                    testResults.Add($"Sample gene has {firstGene.Variants.Count} variants");
                }
            }

            var kitSearch = await Api.SearchGenesAsync(name: "KIT");
            if (kitSearch.Any())
            {
                testResults.Add($"Gene search works - found KIT gene");
            }
            else
            {
                testResults.Add($"Gene search returned no results for KIT");
            }

            var variants = await Api.GetAllVariantsAsync();
            testResults.Add($"Found {variants.Count} total variants");
        }
        catch (Exception ex)
        {
            testResults.Add($"API Error: {ex.Message}");
            Console.WriteLine($"TestApiConnection Error: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Zoek op gen en navigeer naar resultatenpagina
    private async Task SearchGene()
    {
        geneErrorMessage = "";

        if (string.IsNullOrWhiteSpace(geneSearchTerm))
        {
            geneErrorMessage = "Please enter a gene name or NM number";
            return;
        }

        var searchTerm = geneSearchTerm.Trim();

        if (searchTerm.StartsWith("NM_", StringComparison.OrdinalIgnoreCase))
        {
            Navigation.NavigateTo($"/gene-results?nm={Uri.EscapeDataString(searchTerm)}");
        }
        else
        {
            Navigation.NavigateTo($"/gene-results?gene={Uri.EscapeDataString(searchTerm)}");
        }
    }

    // Zoek op positie en navigeer naar resultatenpagina bij geldige invoer
    private async Task SearchPosition()
    {
        positionErrorMessage = "";

        if (string.IsNullOrWhiteSpace(chromosomeSearchTerm) || string.IsNullOrWhiteSpace(positionSearchTerm))
        {
            positionErrorMessage = "Please enter a chromosome and a position";
            return;
        }

        if (!int.TryParse(positionSearchTerm.Trim(), out int position))
        {
            positionErrorMessage = "Position must be a valid number";
            return;
        }

        if (position <= 0)
        {
            positionErrorMessage = "Position must be greater than 0";
            return;
        }

        var chromosome = chromosomeSearchTerm.Trim();

        try
        {
            var genes = await Api.SearchByChromosomePositionAsync(chromosome, position);

            Navigation.NavigateTo($"/gene-results?chrom={Uri.EscapeDataString(chromosome)}&position={position}");
        }
        catch (Exception ex)
        {
            positionErrorMessage = $"Search failed: {ex.Message}";
            Console.WriteLine($"SearchPosition error: {ex}");
        }
    }

    // Injecteer service voor het bewaren van uploadresultaten over componenten heen
    [Inject]
    private UploadResultState uploadResultState { get; set; }

    // Navigeer naar uploadresultaatpagina met meegegeven resultaat
    private void NavigateToUploadResults(AzDeltaKVT.Dto.Results.UploadResult result)
    {
        uploadResultState.Result = result;
        Navigation.NavigateTo("/UploadResult");
    }

    // Beheer uploadmodal en status
    private bool showUploadModal = false;
    private string uploadMessage = "";
    private IBrowserFile? selectedFile;

    // Toggle zichtbaarheid van uploadmodal
    private void ToggleUploadModal()
    {
        showUploadModal = !showUploadModal;
    }

    // Verwerk geselecteerd bestand, controleer extensie .tsv
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file == null || !file.Name.EndsWith(".tsv", StringComparison.OrdinalIgnoreCase))
        {
            uploadMessage = "Please select a valid .tsv file.";
            return;
        }

        selectedFile = file;
    }

    // Upload geselecteerd bestand naar API en verwerk response
    private async Task UploadFile()
    {
        if (selectedFile == null)
        {
            uploadMessage = "No file selected.";
            return;
        }

        try
        {
            uploadMessage = "Uploading...";

            AzDeltaKVT.Dto.Results.UploadResult response = await Api.UploadFileAsync(selectedFile);

            if (!response.Errors.Any())
            {
                uploadMessage = "File uploaded successfully.";
                showUploadModal = false;

                NavigateToUploadResults(response);
            }
            else
            {
                uploadMessage = $"Upload failed: {response.Errors[0]}";
            }
        }
        catch (Exception ex)
        {
            uploadMessage = $"Error: {ex.Message}";
        }
    }
}
