@page "/position/edit"
@using Microsoft.AspNetCore.WebUtilities
@using AzDeltaKVT.UI.Services
@using AzDeltaKVT.Dto.Results
@using AzDeltaKVT.Dto.Requests
@using AzDektaKVT.Model
@using System.Text.Json
@inject ApiService Api
@inject NavigationManager Navigation

<PageTitle>@(isEdit ? "Edit Position" : "Add Position")</PageTitle>

<div class="container py-4">
    <h1 class="h3 text-main mb-4">
        <strong>@(isEdit ? "Edit Position" : "Add Position")</strong>
    </h1>

    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label fw-semibold text-main">NM Number:</label>
            <input type="text" @bind="nmNumber" class="form-control bg-light" disabled />
        </div>

        <div class="col-md-6">
            <label class="form-label fw-semibold text-main">Chromosome:</label>
            <input type="text" @bind="chromosome" class="form-control bg-light" disabled />
        </div>

        <div class="col-md-4">
            <label class="form-label fw-semibold text-main">Position:</label>
            <input type="text" @bind="position" class="form-control bg-light" disabled="@isEdit" />
            @if (isEdit)
            {
                <small class="text-muted">INSERT ONLY</small>
            }
        </div>

        <div class="col-md-4">
            <label class="form-label fw-semibold text-main">Reference:</label>
            <input type="text" @bind="reference" class="form-control" />
        </div>

        <div class="col-md-4">
            <label class="form-label fw-semibold text-main">Alternative:</label>
            <input type="text" @bind="alternative" class="form-control" />
        </div>

        <div class="col-md-6">
            <label class="form-label fw-semibold text-main">Biological Effect:</label>
            <input type="text" @bind="biologicalEffect" class="form-control" />
        </div>

        <div class="col-md-6">
            <label class="form-label fw-semibold text-main">Classification:</label>
            <input type="text" @bind="classification" class="form-control" />
        </div>
    </div>

    <div class="d-flex gap-3 mt-4">
        <button class="btn btn-main fw-bold" @onclick="HandleSave">SAVE</button>
        @if (isEdit)
        {
            <button class="btn btn-danger fw-bold" @onclick="HandleDelete">REMOVE</button>
        }
    </div>

</div>

@code {
    // Form fields
    private string nmNumber = string.Empty;
    private string chromosome = string.Empty;
    private string position = string.Empty;
    private string reference = string.Empty;
    private string alternative = string.Empty;
    private string biologicalEffect = string.Empty;
    private string classification = string.Empty;
    private string variantId = string.Empty;
    private int? variantIdInt = null;

    // Determines if the form is in edit mode
    private bool isEdit = false;

    // Initialization: parse query parameters and load data if editing
    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        // Extract NM number from query string
        if (queryParams.TryGetValue("nm", out var nm))
        {
            nmNumber = nm;
        }

        // Extract chromosome from query string
        if (queryParams.TryGetValue("chromosome", out var chr))
        {
            chromosome = chr;
        }

        // Extract variantId and switch to edit mode if valid
        if (queryParams.TryGetValue("variantId", out var varIdStr) && int.TryParse(varIdStr, out var parsedId))
        {
            variantId = varIdStr;
            variantIdInt = parsedId;
            isEdit = true;
            await GetPositionInfo(); // Load existing variant data
        }
    }

    // Load variant details by variantId
    private async Task GetPositionInfo()
    {
        if (int.TryParse(variantId, out int variantIdInt))
        {
            var positionInfo = await Api.GetPositionByVariantId(variantIdInt);

            if (positionInfo != null)
            {
                chromosome = positionInfo.Variant.Chromosome;
                position = positionInfo.Variant.Position.ToString();
                reference = positionInfo.Variant.Reference;
                alternative = positionInfo.Variant.Alternative;
                biologicalEffect = positionInfo.BiologicalEffect;
                classification = positionInfo.Classification;
                nmNumber = positionInfo.NmId;
            }
        }
        else
        {
            // Optional: handle invalid variantId
            Console.WriteLine($"Invalid variantId: {variantId}");
        }
    }

    // Create or update a gene variant
    private async Task HandleSave()
    {
        var geneVariantRequest = new GeneVariantRequest
            {
                NmId = nmNumber,
                VariantId = variantIdInt ?? 0,
                Variant = new Variant
                {
                    VariantId = 0,
                    Chromosome = chromosome,
                    Position = int.TryParse(position, out var posVal) ? posVal : 0,
                    Reference = reference,
                    Alternative = alternative,
                    UserInfo = "standarduser" // Placeholder user
                },
                BiologicalEffect = biologicalEffect,
                Classification = classification,
                UserInfo = "standarduser" // Placeholder user
            };

        if (isEdit)
        {
            await Api.UpdatePosition(geneVariantRequest); // Update existing variant
            StateHasChanged();
        }
        else
        {
            await Api.CreatePosition(geneVariantRequest); // Create new variant
        }

        Navigation.NavigateTo("/"); // Redirect after save
    }

    // Delete a variant by ID
    private async Task HandleDelete()
    {
        if (variantIdInt.HasValue)
        {
            await Api.DeletePosition(variantIdInt); // Delete variant
            Navigation.NavigateTo("/"); // Redirect after delete
        }
    }
}


