@page "/position"
@page "/position/{geneId}/{chromosome}/{position}"

<div class="container mt-4">
    <h2 class="text-accent fw-bold mb-4">Position Page</h2>

    <!-- Position Information Section -->
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <h4 class="text-accent fw-bold mb-3">Position Information</h4>
            <div class="row">
                <div class="col-md-6">
                    <p><span class="fw-bold text-accent">Gene Name:</span> @GeneName</p>
                    <p><span class="fw-bold text-accent">Chromosome:</span> @Chromosome</p>
                    <p><span class="fw-bold text-accent">Position:</span> @Position</p>
                </div>
                <div class="col-md-6">
                    <p><span class="fw-bold text-accent">Reference:</span> @Reference</p>
                    <p><span class="fw-bold text-accent">Alternative:</span> @Alternative</p>
                </div>
            </div>
        </div>
    </div>

    <!-- NM Transcripts Section -->
    <h4 class="text-accent fw-bold mb-3">Associated NM Transcripts</h4>

    @if (SortedGeneDetails.Any())
    {
        @foreach (var item in SortedGeneDetails.Select((value, index) => new { value, index }))
        {
            <div class="card mb-3 shadow-sm border-start border-4 @GetPriorityBorderClass(item.value)">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <h5 class="text-accent fw-bold mb-3">
                                @(item.index + 1)) NM_NUMBER: <span class="text-secondary">@item.value.NmNumber</span>
                                <span class="ms-2">@GetPriorityBadge(item.value)</span>
                            </h5>

                            <div class="row">
                                <div class="col-md-6">
                                    <ul class="list-unstyled">
                                        <li class="mb-1">
                                            <span class="text-accent fw-bold">Is_Select:</span>
                                            <span class="badge @(item.value.IsSelect == "Yes" ? "bg-success" : "bg-secondary")">
                                                @item.value.IsSelect
                                            </span>
                                        </li>
                                        <li class="mb-1">
                                            <span class="text-accent fw-bold">Is_Clinical:</span>
                                            <span class="badge @(item.value.IsClinical == "Yes" ? "bg-info" : "bg-secondary")">
                                                @item.value.IsClinical
                                            </span>
                                        </li>
                                        <li class="mb-1">
                                            <span class="text-accent fw-bold">Is_InHouse:</span>
                                            <span class="badge @(item.value.IsInHouse == "Yes" ? "bg-primary" : "bg-secondary")">
                                                @item.value.IsInHouse
                                            </span>
                                        </li>
                                    </ul>
                                </div>
                                <div class="col-md-6">
                                    <ul class="list-unstyled">
                                        <li class="mb-1">
                                            <span class="text-accent fw-bold">Biological Effect:</span>
                                            <span class="text-secondary">@item.value.BiologicalEffect</span>
                                        </li>
                                        <li class="mb-1">
                                            <span class="text-accent fw-bold">Classification:</span>
                                            <span class="badge @GetClassificationBadgeClass(item.value.Classification)">
                                                @item.value.Classification
                                            </span>
                                        </li>
                                        <li class="mb-1">
                                            <span class="text-accent fw-bold">User_Info:</span>
                                            <span class="text-secondary">@item.value.UserInfo</span>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <div class="ms-3">
                            <button class="btn btn-outline-primary fw-bold px-4" @onclick="() => EditItem(item.value)">
                                <i class="bi bi-pencil-square me-2"></i>Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            No NM transcripts found for this position.
        </div>
    }
</div>

@code {
    [Parameter] public string? GeneId { get; set; }
    [Parameter] public string? Chromosome { get; set; }
    [Parameter] public string? Position { get; set; }

    // Position data - replace with actual data service calls
    private string GeneName = "TP53";
    private string Reference = "G";
    private string Alternative = "A";

    private List<GeneDetail> GeneDetails = new()
    {
        new GeneDetail
        {
            NmNumber = "NM_000546",
            IsSelect = "Yes",
            IsClinical = "Yes",
            IsInHouse = "No",
            BiologicalEffect = "Missense",
            Classification = "Pathogenic",
            UserInfo = "User A"
        },
        new GeneDetail
        {
            NmNumber = "NM_001126112",
            IsSelect = "No",
            IsClinical = "No",
            IsInHouse = "Yes",
            BiologicalEffect = "Nonsense",
            Classification = "Likely pathogenic",
            UserInfo = "User B"
        },
        new GeneDetail
        {
            NmNumber = "NM_001276761",
            IsSelect = "Yes",
            IsClinical = "No",
            IsInHouse = "No",
            BiologicalEffect = "Synonymous",
            Classification = "Benign",
            UserInfo = "User C"
        },
        new GeneDetail
        {
            NmNumber = "NM_001126113",
            IsSelect = "No",
            IsClinical = "Yes",
            IsInHouse = "No",
            BiologicalEffect = "Frameshift",
            Classification = "Pathogenic",
            UserInfo = "User D"
        }
    };

    // Sorted list according to specifications:
    // 1. InHouse first, 2. Select second, 3. Clinical third, 4. Alphabetical within groups
    private List<GeneDetail> SortedGeneDetails =>
        GeneDetails
            .OrderBy(x => GetSortPriority(x))
            .ThenBy(x => x.NmNumber)
            .ToList();

    protected override void OnInitialized()
    {
        // Use parameters if provided
        if (!string.IsNullOrEmpty(GeneId))
        {
            GeneName = GeneId;
        }
        if (!string.IsNullOrEmpty(Chromosome))
        {
            this.Chromosome = Chromosome;
        }
        if (!string.IsNullOrEmpty(Position))
        {
            this.Position = Position;
        }

        // TODO: Load actual data from service based on parameters
        LoadPositionData();
    }

    private int GetSortPriority(GeneDetail detail)
    {
        // Priority 1: InHouse = Yes
        if (detail.IsInHouse == "Yes") return 1;

        // Priority 2: Select = Yes
        if (detail.IsSelect == "Yes") return 2;

        // Priority 3: Clinical = Yes
        if (detail.IsClinical == "Yes") return 3;

        // Priority 4: Others
        return 4;
    }

    private string GetPriorityBorderClass(GeneDetail detail)
    {
        return GetSortPriority(detail) switch
        {
            1 => "border-primary",   // InHouse
            2 => "border-success",   // Select
            3 => "border-info",      // Clinical
            _ => "border-secondary"  // Others
        };
    }

    private string GetPriorityBadge(GeneDetail detail)
    {
        return GetSortPriority(detail) switch
        {
            1 => "<span class=\"badge bg-primary ms-1\">InHouse</span>",
            2 => "<span class=\"badge bg-success ms-1\">Select</span>",
            3 => "<span class=\"badge bg-info ms-1\">Clinical</span>",
            _ => ""
        };
    }

    private string GetClassificationBadgeClass(string classification)
    {
        return classification?.ToLower() switch
        {
            "pathogenic" => "bg-danger",
            "likely pathogenic" => "bg-warning text-dark",
            "benign" => "bg-success",
            "likely benign" => "bg-light text-dark",
            "uncertain significance" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private void EditItem(GeneDetail item)
    {
        // TODO: Navigate to edit page or open modal
        // Navigation.NavigateTo($"/edit-variant/{item.NmNumber}");
        Console.WriteLine($"Edit clicked for: {item.NmNumber}");
    }

    private void LoadPositionData()
    {
        // TODO: Replace with actual API service calls
        // var positionData = await PositionService.GetPositionAsync(GeneName, Chromosome, Position);
        // var variants = await VariantService.GetVariantsByPositionAsync(GeneName, Chromosome, Position);
    }

    public class GeneDetail
    {
        public string NmNumber { get; set; } = "";
        public string IsSelect { get; set; } = "";
        public string IsClinical { get; set; } = "";
        public string IsInHouse { get; set; } = "";
        public string BiologicalEffect { get; set; } = "";
        public string Classification { get; set; } = "";
        public string UserInfo { get; set; } = "";
    }
}