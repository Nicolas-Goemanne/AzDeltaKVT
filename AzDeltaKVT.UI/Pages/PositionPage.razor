@page "/position"
@page "/position/{chromosome}/{position}"
@using AzDeltaKVT.UI.Services
@using AzDeltaKVT.Dto.Results
@using AzDektaKVT.Model
@inject ApiService ApiService
@inject NavigationManager Navigation

<div class="container py-4">
    <h1 class="h3 text-main mb-4"><strong>Position Page</strong></h1>

    @if (IsLoading)
    {
        <div class="d-flex justify-content-center align-items-center py-5">
            <div class="spinner-border text-main" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-3 h5 text-main">Loading...</span>
        </div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">
            <strong>Error:</strong> @ErrorMessage
        </div>
    }
    else
    {
        <!-- Position Information Section -->
        <section class="mb-5">
            <h2 class="h5 text-main mb-3">Position Information</h2>
            <div class="table-responsive">
                <table class="table table-bordered align-middle">
                    <tbody>
                        <tr>
                            <td><strong>Gene Name</strong></td>
                            <td>@GeneName</td>
                        </tr>
                        <tr>
                            <td><strong>Chromosome</strong></td>
                            <td>@Chromosome</td>
                        </tr>
                        <tr>
                            <td><strong>Position</strong></td>
                            <td>@Position</td>
                        </tr>
                        <tr>
                            <td><strong>Reference</strong></td>
                            <td>@Reference</td>
                        </tr>
                        <tr>
                            <td><strong>Alternative</strong></td>
                            <td>@Alternative</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </section>

        <!-- NM Transcripts Section -->
        <section class="mb-5">
            <h2 class="h5 text-main mb-3">Associated NM Transcripts</h2>

            @if (SortedTranscripts.Any())
            {
                @foreach (var transcript in SortedTranscripts)
                {
                    var geneVariant = GetGeneVariantForTranscript(transcript.NmNumber);

                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="flex-grow-1">
                                    <h5 class="text-main fw-bold mb-3">
                                        NM_NUMBER: @transcript.NmNumber
                                        <span class="ms-2">@((MarkupString)GetPriorityBadge(transcript))</span>
                                    </h5>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <ul class="list-unstyled">
                                                <li class="mb-2">
                                                    <strong>IS_SELECT:</strong>
                                                    <span class="badge @(transcript.IsSelect ? "bg-success" : "bg-secondary")">
                                                        @(transcript.IsSelect ? "Yes" : "No")
                                                    </span>
                                                </li>
                                                <li class="mb-2">
                                                    <strong>IS_CLINICAL:</strong>
                                                    <span class="badge @(transcript.IsClinical ? "bg-info" : "bg-secondary")">
                                                        @(transcript.IsClinical ? "Yes" : "No")
                                                    </span>
                                                </li>
                                                <li class="mb-2">
                                                    <strong>IS_INHOUSE:</strong>
                                                    <span class="badge @(transcript.IsInHouse ? "bg-primary" : "bg-secondary")">
                                                        @(transcript.IsInHouse ? "Yes" : "No")
                                                    </span>
                                                </li>
                                            </ul>
                                        </div>
                                        <div class="col-md-6">
                                            <ul class="list-unstyled">
                                                <li class="mb-2">
                                                    <strong>BIOLOGICAL_EFFECT:</strong>
                                                    <span class="text-muted">@(geneVariant?.BiologicalEffect ?? "N/A")</span>
                                                </li>
                                                <li class="mb-2">
                                                    <strong>CLASSIFICATION:</strong>
                                                    @if (!string.IsNullOrEmpty(geneVariant?.Classification))
                                                    {
                                                        <span class="badge @GetClassificationBadgeClass(geneVariant.Classification)">
                                                            @geneVariant.Classification
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">N/A</span>
                                                    }
                                                </li>
                                                <li class="mb-2">
                                                    <strong>USER_INFO:</strong>
                                                    <span class="text-muted">@(geneVariant?.UserInfo ?? "N/A")</span>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>

                                <div class="ms-3">
                                    <button type="button" @onclick="() => EditTranscript(transcript)"
                                            class="btn btn-main fw-bold">
                                        EDIT
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-muted">No NM transcripts found for this position.</div>
            }
        </section>
    }
</div>

@code {
    [Parameter] public string? Chromosome { get; set; }
    [Parameter] public string? Position { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? Id { get; set; }

    private string GeneName = "";
    private string Reference = "";
    private string Alternative = "";
    private bool IsLoading = true;
    private string ErrorMessage = "";

    private List<NmTranscriptResult> Transcripts = new();
    private List<GeneVariantResult> GeneVariants = new();

    private List<NmTranscriptResult> SortedTranscripts =>
        Transcripts
            .OrderBy(x => GetSortPriority(x))
            .ThenBy(x => x.NmNumber)
            .ToList();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"PositionPage parameters - Id: '{Id}', Chromosome: '{Chromosome}', Position: '{Position}'");
        await LoadPositionData();
    }

    private async Task LoadPositionData()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = "";

            if (Id.HasValue)
            {
                await LoadByVariantId(Id.Value);
            }
            else if (!string.IsNullOrEmpty(Chromosome) && !string.IsNullOrEmpty(Position))
            {
                await LoadByChromosomePosition(Chromosome, Position);
            }
            else
            {
                ErrorMessage = "Please provide either a variant ID or chromosome and position.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading position data: {ex.Message}";
            Console.WriteLine($"LoadPositionData error: {ex}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadByVariantId(int variantId)
    {
        // Instead of trying to get variant, search all genes to find one with this variant ID
        var allGenes = await ApiService.GetAllGenesAsync();

        GeneResult? foundGene = null;
        Variant? foundVariant = null;

        foreach (var gene in allGenes)
        {
            if (gene.Variants != null)
            {
                foundVariant = gene.Variants.FirstOrDefault(v => v.VariantId == variantId);
                if (foundVariant != null)
                {
                    foundGene = gene;
                    break;
                }
            }
        }

        if (foundGene != null && foundVariant != null)
        {
            GeneName = foundGene.Name;
            this.Chromosome = foundVariant.Chromosome ?? "";
            this.Position = foundVariant.Position?.ToString() ?? "";
            Reference = foundVariant.Reference ?? "";
            Alternative = foundVariant.Alternative ?? "";

            // Get transcripts from the found gene
            Transcripts = foundGene.NmNumbers?.Select(t => new NmTranscriptResult
                {
                    NmNumber = t.NmNumber ?? "",
                    GeneId = t.GeneId ?? "",
                    IsSelect = t.IsSelect,
                    IsClinical = t.IsClinical,
                    IsInHouse = t.IsInHouse
                }).ToList() ?? new List<NmTranscriptResult>();

            // Get gene variants
            var variants = foundGene.Variants?.Select(v => new VariantResult
                {
                    VariantId = v.VariantId,
                    Chromosome = v.Chromosome,
                    Position = v.Position,
                    Reference = v.Reference,
                    Alternative = v.Alternative,
                    UserInfo = v.UserInfo
                }).ToList() ?? new List<VariantResult>();

            GeneVariants = await ApiService.GetGeneVariantsForVariantsAsync(variants);
        }
        else
        {
            ErrorMessage = $"Variant with ID {variantId} not found.";
        }
    }

    private async Task LoadByChromosomePosition(string chromosome, string position)
    {
        this.Chromosome = chromosome;
        this.Position = position;

        // Use the variants API to get variant info directly
        if (int.TryParse(position, out int pos))
        {
            // First, try to get the variant directly using the variants API
            var variants = await ApiService.SearchVariantsAsync(chromosome, pos);
            var matchingVariant = variants.FirstOrDefault();

            if (matchingVariant != null)
            {
                Reference = matchingVariant.Reference ?? "";
                Alternative = matchingVariant.Alternative ?? "";
                Console.WriteLine($"Found variant: Reference={Reference}, Alternative={Alternative}");
            }
            else
            {
                Console.WriteLine($"No variant found for {chromosome}:{position}");
                // Fallback: try to find variant info from genes
                var allGenes = await ApiService.GetAllGenesAsync();

                foreach (var gene in allGenes)
                {
                    if (gene.Variants != null)
                    {
                        var geneVariant = gene.Variants.FirstOrDefault(v =>
                            v.Chromosome == chromosome && v.Position == pos);

                        if (geneVariant != null)
                        {
                            Reference = geneVariant.Reference ?? "";
                            Alternative = geneVariant.Alternative ?? "";
                            Console.WriteLine($"Found variant from gene: Reference={Reference}, Alternative={Alternative}");
                            break;
                        }
                    }
                }
            }
        }

        await LoadTranscriptsForPosition();
    }

    private async Task LoadTranscriptsForPosition()
    {
        // Get all transcripts and find the gene that contains this position
        var allGenes = await ApiService.GetAllGenesAsync();

        if (int.TryParse(Position, out int pos))
        {
            var genesContainingPosition = allGenes.Where(g =>
                g.Chromosome == Chromosome &&
                pos >= g.Start &&
                pos <= g.Stop).ToList();

            if (genesContainingPosition.Any())
            {
                // Use the first gene found
                var gene = genesContainingPosition.First();
                GeneName = gene.Name;

                // Get all transcripts for this gene
                Transcripts = gene.NmNumbers?.Select(t => new NmTranscriptResult
                    {
                        NmNumber = t.NmNumber ?? "",
                        GeneId = t.GeneId ?? "",
                        IsSelect = t.IsSelect,
                        IsClinical = t.IsClinical,
                        IsInHouse = t.IsInHouse
                    }).ToList() ?? new List<NmTranscriptResult>();

                // Load gene variants for additional info
                var variants = gene.Variants?.Select(v => new VariantResult
                    {
                        VariantId = v.VariantId,
                        Chromosome = v.Chromosome,
                        Position = v.Position,
                        Reference = v.Reference,
                        Alternative = v.Alternative,
                        UserInfo = v.UserInfo
                    }).ToList() ?? new List<VariantResult>();

                GeneVariants = await ApiService.GetGeneVariantsForVariantsAsync(variants);
            }
            else
            {
                ErrorMessage = $"No gene found containing position {Chromosome}:{Position}";
            }
        }
        else
        {
            ErrorMessage = "Invalid position format.";
        }
    }

    private GeneVariantResult? GetGeneVariantForTranscript(string nmNumber)
    {
        return GeneVariants.FirstOrDefault(gv => gv.NmTranscript?.NmNumber == nmNumber);
    }

    private int GetSortPriority(NmTranscriptResult transcript)
    {
        if (transcript.IsInHouse) return 1;   // InHouse first
        if (transcript.IsSelect) return 2;    // Select second
        if (transcript.IsClinical) return 3;  // Clinical third
        return 4;                             // Alphabetical last
    }

    private string GetPriorityBadge(NmTranscriptResult transcript)
    {
        return GetSortPriority(transcript) switch
        {
            1 => "<span class=\"badge bg-primary ms-1\">InHouse</span>",
            2 => "<span class=\"badge bg-success ms-1\">Select</span>",
            3 => "<span class=\"badge bg-info ms-1\">Clinical</span>",
            _ => ""
        };
    }

    private string GetClassificationBadgeClass(string classification)
    {
        return classification?.ToLower() switch
        {
            "pathogenic" => "bg-danger",
            "likely pathogenic" => "bg-warning text-dark",
            "benign" => "bg-success",
            "likely benign" => "bg-light text-dark",
            "uncertain significance" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private void EditTranscript(NmTranscriptResult transcript)
    {
        // Navigate to edit page for this specific transcript
        Navigation.NavigateTo($"/gene/edit/{Uri.EscapeDataString(GeneName)}/{Uri.EscapeDataString(transcript.NmNumber)}");
    }
}