@page "/gene/edit"
@page "/gene/edit/{GeneName}"
@page "/gene/edit/{GeneName}/{NmNumber}"
@using AzDeltaKVT.UI.Services
@using AzDeltaKVT.Dto.Results
@using AzDeltaKVT.Dto.Requests
@using AzDektaKVT.Model
@inject ApiService Api
@inject NavigationManager Navigation

<PageTitle>@(IsEditMode ? "Edit Gene" : IsAddingTranscriptMode ? "Add Transcript" : "Add New Gene")</PageTitle>



<div class="container py-4">
	<h1 class="h3 text-main mb-4"><strong>@(IsEditMode ? "Edit Gene" : IsAddingTranscriptMode ? "Add Transcript" : "Add New Gene")</strong></h1>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-main" role="status"></div>
        </div>
    }
    else
    {
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

       <div class="row g-3">
    <div class="col-md-6">
        <label class="form-label fw-semibold text-main">Name:</label>
        <input type="text" @bind="geneName" disabled="@(IsEditMode || IsAddingTranscriptMode)"
               class="form-control @((IsEditMode || IsAddingTranscriptMode) ? "bg-light" : "")"
               placeholder="Enter gene name here (example: KIT)" />
        @if (IsEditMode || IsAddingTranscriptMode) { <small class="text-muted">INSERT ONLY</small> }
    </div>

    <div class="col-md-6">
        <label class="form-label fw-semibold text-main">NM Number:</label>
        <input type="text" @bind="nmNumber" disabled="@(IsEditMode || IsAddingTranscriptMode)"
               class="form-control @((IsEditMode || IsAddingTranscriptMode) ? "bg-light" : "")"
               placeholder="Enter NM number here (example: NM_000222.2)" />
        @if (IsEditMode || IsAddingTranscriptMode) { <small class="text-muted">INSERT ONLY</small> }
    </div>

    <div class="col-md-4">
        <div class="form-check">
            <input type="checkbox" @bind="isSelect" class="form-check-input" id="isSelect" />
            <label class="form-check-label fw-semibold text-main" for="isSelect">Is Select</label>
        </div>
    </div>

    <div class="col-md-4">
        <div class="form-check">
            <input type="checkbox" @bind="isClinical" class="form-check-input" id="isClinical" />
            <label class="form-check-label fw-semibold text-main" for="isClinical">Is Clinical</label>
        </div>
    </div>

    <div class="col-md-4">
        <div class="form-check">
            <input type="checkbox" @bind="isInHouse" class="form-check-input" id="isInHouse" />
            <label class="form-check-label fw-semibold text-main" for="isInHouse">Is InHouse</label>
        </div>
    </div>

    <div class="col-md-4">
        <label class="form-label fw-semibold text-main">Chromosome:</label>
        <input type="text" @bind="chromosome" disabled="@(IsEditMode || IsAddingTranscriptMode)"
               class="form-control @((IsEditMode || IsAddingTranscriptMode) ? "bg-light" : "")"
               placeholder="Enter chromosone here (example: MT)" />
        @if (IsEditMode || IsAddingTranscriptMode) { <small class="text-muted">INSERT ONLY</small> }
    </div>

    <div class="col-md-4">
        <label class="form-label fw-semibold text-main">Start:</label>
        <input type="number" @bind="start" disabled="@(IsEditMode || IsAddingTranscriptMode)"
               class="form-control @((IsEditMode || IsAddingTranscriptMode) ? "bg-light" : "")" />
        @if (IsEditMode || IsAddingTranscriptMode) { <small class="text-muted">INSERT ONLY</small> }
    </div>

    <div class="col-md-4">
        <label class="form-label fw-semibold text-main">Stop:</label>
        <input type="number" @bind="stop" disabled="@(IsEditMode || IsAddingTranscriptMode)"
               class="form-control @((IsEditMode || IsAddingTranscriptMode) ? "bg-light" : "")" />
        @if (IsEditMode || IsAddingTranscriptMode) { <small class="text-muted">INSERT ONLY</small> }
    </div>

    <div class="col-12">
        <label class="form-label fw-semibold text-main">Info:</label>
        <textarea @bind="userInfo" class="form-control" rows="4"></textarea>
    </div>
</div>

<div class="d-flex gap-3 mt-4">
    <button type="button" @onclick="Save" class="btn btn-main fw-bold" disabled="@isSaving">
        @if (isSaving) { <span class="spinner-border spinner-border-sm me-2"></span> }
        SAVE
    </button>

    @if (IsEditMode)
    {
        <button type="button" @onclick="Remove" class="btn btn-danger fw-bold" disabled="@isRemoving">
            @if (isRemoving) { <span class="spinner-border spinner-border-sm me-2"></span> }
            REMOVE
        </button>
    }
</div>

    }

    <!-- Confirmation Modal -->
    @if (showConfirmDialog)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title text-main fw-bold">Confirm Delete</h5>
                    </div>
                    <div class="modal-body">
                        <p class="mb-0">@confirmMessage</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                        <button type="button" class="btn btn-danger fw-bold" @onclick="ConfirmDelete" disabled="@isRemoving">
                            @if (isRemoving)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? GeneName { get; set; }
    [Parameter] public string? NmNumber { get; set; }

    private bool IsEditMode => !string.IsNullOrEmpty(GeneName) && !string.IsNullOrEmpty(NmNumber);
    private bool IsAddingTranscriptMode => !string.IsNullOrEmpty(GeneName) && string.IsNullOrEmpty(NmNumber);

    private bool isLoading = false;
    private bool isSaving = false;
    private bool isRemoving = false;
    private string errorMessage = "";
    private bool showConfirmDialog = false;
    private string confirmMessage = "";

    private string geneName = "";
    private string nmNumber = "";
    private string chromosome = "";
    private int start = 0;
    private int stop = 0;
    private string userInfo = "";
    private bool isSelect = false;
    private bool isClinical = false;
    private bool isInHouse = false;

    private GeneResult? originalGene;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            await LoadData();
        }
        else if (IsAddingTranscriptMode)
        {
            var genes = await Api.SearchGenesAsync(name: GeneName);
            originalGene = genes?.FirstOrDefault();

            if (originalGene != null)
            {
	            geneName = originalGene.Name;
	            start = originalGene.Start;
	            stop = originalGene.Stop;
	            chromosome = originalGene.Chromosome;
            }
        }
        }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var genes = await Api.SearchGenesAsync(name: GeneName);
            originalGene = genes?.FirstOrDefault();

            if (originalGene != null)
            {
                geneName = originalGene.Name;
                chromosome = originalGene.Chromosome;
                start = originalGene.Start;
                stop = originalGene.Stop;
                userInfo = originalGene.UserInfo ?? "";

                // Load specific transcript if NmNumber provided, otherwise first transcript
                NmTranscript? transcript = null;
                if (!string.IsNullOrEmpty(NmNumber))
                {
                    transcript = originalGene.NmNumbers?.FirstOrDefault(t => 
                        t.NmNumber?.Equals(NmNumber, StringComparison.OrdinalIgnoreCase) == true);
                }
                else
                {
                    transcript = originalGene.NmNumbers?.FirstOrDefault();
                }

                if (transcript != null)
                {
                    nmNumber = transcript.NmNumber ?? "";
                    isSelect = transcript.IsSelect;
                    isClinical = transcript.IsClinical;
                    isInHouse = transcript.IsInHouse;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Save()
    {
        if (string.IsNullOrWhiteSpace(geneName) || string.IsNullOrWhiteSpace(nmNumber))
        {
            errorMessage = "Gene name and NM number are required";
            return;
        }
        if (start <= 0)
        {
	        errorMessage = "Start should be bigger than 0";
	        return;
        }
        if (stop <= 0)
        {
	        errorMessage = "Stop Should be bigger than 0";
	        return;
        }

        isSaving = true;
        errorMessage = "";

		try
		{
			var request = new GeneRequest
				{
					Name = geneName,
					Chromosome = chromosome,
					Start = start,
					Stop = stop,
					UserInfo = userInfo,
					Nm_Number = nmNumber,
					Position = null,
					IsClinical = isClinical,
					IsInHouse = isInHouse,
					IsSelect = isSelect
				};

            if (IsEditMode)
            {
                await Api.UpdateGeneAsync(request);
            }
            else
            {
                await Api.CreateGeneAsync(request);
            }

            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task Remove()
    {
        if (originalGene?.NmNumbers?.Count > 1)
        {
            confirmMessage = $"Are you sure you want to delete the transcript '{nmNumber}'?";
        }
        else
        {
            confirmMessage = $"Are you sure you want to delete the gene '{geneName}'? This will remove all associated data.";
        }

        showConfirmDialog = true;
    }

    private void CancelDelete()
    {
        showConfirmDialog = false;
        confirmMessage = "";
    }

    private async Task ConfirmDelete()
    {
        isRemoving = true;
        errorMessage = "";

        try
        {
            if (originalGene?.NmNumbers?.Count > 1)
            {
                await Api.RemoveTranscriptAsync(nmNumber);
            }
            else
            {
                await Api.RemoveGeneAsync(geneName);
            }

            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            showConfirmDialog = false;
        }
        finally
        {
            isRemoving = false;
        }
    }
}